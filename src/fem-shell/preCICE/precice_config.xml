<?xml version="1.0"?>

<precice-configuration>
  
  <log-filter target="debug" component="precice" switch="off" />
  <log-filter target="info"  component="" switch="on"/>
  <!--<log-filter target="debug" component="precice::cplscheme::impl::IQNILSPostProcessing" switch="on" />
  <log-filter target="debug" component="precice::cplscheme::impl::BaseQNPostProcessing" switch="on" />
  <log-filter target="debug" component="precice::cplscheme::impl::MMPostProcessing" switch="on" />
  <log-filter target="debug" component="precice::cplscheme::ImplicitCouplingScheme" switch="on" />-->
  
  <solver-interface dimensions="2">
    
    <!-- Data fields that are exchanged between the solvers -->
    <data:vector name="Stresses"/>
    <data:vector name="Displacements"/>

    <!-- A common mesh that uses these data fields -->
    <mesh name="Fluid_Nodes">
        <use-data name="Displacements"/>
        <use-data name="Stresses"/>
    </mesh>

    <mesh name="Structure_Nodes">
       <use-data name="Displacements"/>   
       <use-data name="Stresses"/>
    </mesh>

    <!-- Communication method, use TCP sockets -->
    <m2n:sockets from="FLUID" to="STRUCTURE" />

    <!-- Represents each solver using preCICE. In a coupled simulation, two participants have to be
         defined. The name of the participant has to match the name given on construction of the
         precice::SolverInterface object used by the participant. -->
    
    <participant name="FLUID">
      <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->

      <use-mesh name="Fluid_Nodes" provide="yes"/>
      <use-mesh name="Structure_Nodes" from="STRUCTURE"/>
      <!-- Define input/output of the solver.  -->
      <write-data name="Stresses" mesh="Fluid_Nodes"/>
      <read-data  name="Displacements" mesh="Fluid_Nodes"/>
      <mapping:nearest-neighbor direction="write" from="Fluid_Nodes" to="Structure_Nodes" constraint="consistent" timing="initial"/>
      <mapping:nearest-neighbor direction="read"  from="Structure_Nodes" to="Fluid_Nodes" constraint="consistent" timing="initial"/>
<!--      <export:vtk timestep-interval="1" directory="output/"/>-->
    </participant>
    
    <participant name="STRUCTURE">
      <use-mesh name="Structure_Nodes" provide="yes"/>
      <write-data name="Displacements" mesh="Structure_Nodes"/>
      <read-data  name="Stresses"      mesh="Structure_Nodes"/>
<!--      <export:vtk timestep-interval="1" directory="output/"/>-->
    </participant>
   

      <coupling-scheme:serial-implicit>
         <participants first="FLUID" second="STRUCTURE"/>
         <max-time value="2.0"/>
         <timestep-length value="0.01" valid-digits="8"/>
         <!--<checkpoint timestep-interval="10"/> -->
         <max-iterations value="20"/>
         <exchange data="Stresses"        mesh="Structure_Nodes" from="FLUID" to="STRUCTURE"/>
         <exchange data="Displacements" mesh="Structure_Nodes" from="STRUCTURE" to="FLUID" initialize="true"/>
<!--         <relative-convergence-measure data="Stresses"        mesh="Structure_Nodes" limit="1e-7"/> -->
         <relative-convergence-measure data="Displacements" mesh="Structure_Nodes" limit="1e-4"/>
         <post-processing:IQN-ILS> 
	    <!-- PostProc always done on the second solver -->
            <data name="Displacements" mesh="Structure_Nodes">
            <!-- <data name="Stresses" mesh="Structure_Nodes" scaling="1e7">  Won't work for a serial scheme--> 
            <initial-relaxation value="0.001"/>
            <max-used-iterations value="20"/>
            <timesteps-reused value="5"/>
            <filter name="QR1-filter"/>
            <singularity-limit value="1e-9"/>
         </post-processing:IQN-ILS>
         <extrapolation-order value="2"/>
      </coupling-scheme:serial-implicit>
    
  </solver-interface>
  
</precice-configuration>
